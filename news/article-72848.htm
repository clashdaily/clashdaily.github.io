<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashdaily.github.io/news/article-72848.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>[js] 回调函数 回调地狱 Promise async/await</title>
        <meta name="description" content="1. 回调函数 callback   一种封装代码的手段   什么是 callback , 概念 =&gt; 把 函数A 当做 实参 传递到 函数B 内部 =&gt; 在 函数B 内部以 形参 的方式" />
        <link rel="icon" href="/assets/website/img/clashdaily/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Daily免费订阅地址每日更新">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashdaily.github.io/news/article-72848.htm" />
    <meta property="og:site_name" content="Clash Daily免费订阅地址每日更新" />
    <meta property="og:title" content="[js] 回调函数 回调地狱 Promise async/await" />
    <meta property="og:image" content="https://clashdaily.github.io/uploads/20250110/0c91ff482f2565f4d382f5bd7f44d839.webp" />
        <meta property="og:release_date" content="2025-03-13T09:21:30" />
    <meta property="og:updated_time" content="2025-03-13T09:21:30" />
        <meta property="og:description" content="1. 回调函数 callback   一种封装代码的手段   什么是 callback , 概念 =&gt; 把 函数A 当做 实参 传递到 函数B 内部 =&gt; 在 函数B 内部以 形参 的方式" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="[js] 回调函数 回调地狱 Promise async/await">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="/assets/website/css/clashdaily/all.css">
    <!-- Bootstrap core CSS -->
    <link href="/assets/website/css/clashdaily/bootstrap.min.css" rel="stylesheet">
    <!-- Material Design Bootstrap -->
    <link href="/assets/website/css/clashdaily/mdb.min.css" rel="stylesheet">
    <!-- Your custom styles (optional) -->
    <link href="/assets/website/css/clashdaily/style.min.css" rel="stylesheet">
    <style type="text/css">
    html,
    body,
    header,
    .carousel {
        height: 60vh;
    }

    @media (max-width: 740px) {

        html,
        body,
        header,
        .carousel {
            height: 100vh;
        }
    }

    @media (min-width: 800px) and (max-width: 850px) {

        html,
        body,
        header,
        .carousel {
            height: 100vh;
        }
    }

    @media (min-width: 800px) and (max-width: 850px) {
        .navbar:not(.top-nav-collapse) {
            background: #1C2331 !important;
        }
    }
    </style>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-QCN2RGZW4R"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-QCN2RGZW4R');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Navbar -->
    <nav class="navbar fixed-top navbar-expand-lg navbar-dark scrolling-navbar">
        <div class="container">
            <!-- Brand -->
            <a class="navbar-brand xcblog-blog-logo" href="/">
                                <span>Clash Daily</span>
                            </a>
            <!-- Collapse -->
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <!-- Links -->
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <!-- Left -->
                <ul class="navbar-nav mr-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>

            </div>
        </div>
    </nav>
    <!-- Navbar -->
    <!--Carousel Wrapper-->
    <div id="carousel-example-1z" class="carousel slide carousel-fade" data-ride="carousel">
        <!--Slides-->
        <div class="carousel-inner" role="listbox">
            <div class="carousel-item active">
                <div class="view" style="background-image: url(/assets/website/img/clashdaily/93.jpg); background-repeat: no-repeat; background-size: cover;">
                    <!-- Mask & flexbox options-->
                    <div class="mask rgba-black-light d-flex justify-content-center align-items-center">
                        <!-- Content -->
                        <div class="text-center white-text mx-5 wow fadeIn">
                            <h1 class="mb-4">
                                [js] 回调函数 回调地狱 Promise async/await                            </h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                            </p>
                        </div>
                        <!-- Content -->
                    </div>
                    <!-- Mask & flexbox options-->
                </div>
            </div>
        </div>
        <!--/.Slides-->
    </div>
    <!--/.Carousel Wrapper-->
    <!--Main layout-->
    <main>
        <div class="container">
            <section class="mt-5">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-dracula"> <h2><a id="1__callback_0" rel="nofollow"></a>1. 回调函数 callback</h2> <ul> <li> <p>一种封装代码的手段</p> </li> <li> <p>什么是 callback , 概念</p> <p>=&gt; 把 函数A 当做 实参 传递到 函数B 内部</p> <p>=&gt; 在 函数B 内部以 形参 的方式 调用 函数A</p> <p>=&gt; 我们管这个行为叫做 回调函数</p> <p>=&gt; 我们说 函数A 是 函数B 的 回调函数</p> </li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 A 函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span><span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 此时 fn 形参接受的是书写在 B() 的时候, () 内部的内容 : A</span><span class="token comment">// 此时 fn 形参接受的就是全局 函数 A 的地址</span><span class="token comment">// 此时 fn 形参和全局变量 A 操作一个函数空间</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 B 函数'</span><span class="token punctuation">)</span><span class="token comment">// 调用 fn 其实就是在调用执行全局的 A 函数</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 调用 B 函数</span><span class="token comment">// A 是一个保存 函数的地址</span><span class="token comment">// 把 函数 A 这个地址当做实参传递给了 B 函数内部的 fn 形参</span><span class="token constant">B</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token comment">// 函数A 是 函数B 的回调函数</span></code></pre> <ul> <li> <p>为什么需要 callback 回调函数</p> </li> <li> <p>如果从头到尾都是 同步代码, 不需要回调函数</p> <p>=&gt; 当你在 封装代码 的时候</p> <p>=&gt; 并且代码内有 异步 的时候</p> <p>=&gt; 并且需要在 异步的 末尾 做一些事情的时候</p> <p>=&gt; 使用 callback</p> </li> </ul> <p>解释: 为什么异步的末尾封装要使用 callback</p> <ul> <li> <p>因为 JS 的单线程，同一个时间点只能做一个事情</p> </li> <li> <p>主要: 异步的结束时间不确定</p> </li> <li> <p>例子: 外卖</p> <p>=&gt; 一个外卖员同一个时间点只能做一件事情</p> <p>=&gt; 如果你希望多带一双筷子</p> <p>=&gt; 方案1: 等到外卖员刚好到达店里的时候, 给他打电话</p> <p>=&gt; 方案2: 在点餐的时候给一个备注</p> </li> </ul> <hr/> <p> 回调函数的缺点:</p> <ul> <li> <p>回调地狱</p> </li> <li> <p>当回调 嵌套 回调的时候, 代码的阅读和可维护性不高</p> </li> </ul> <p>解决回调地狱的问题:</p> <ul> <li> <p>Promise 来解决回调地狱</p> </li> <li> <p>分析:</p> <p>=&gt; Promise 是来解决回调地狱</p> <p>=&gt; 回调地狱, 是因为回调函数嵌套过多</p> <p>=&gt; 回调函数, 为了解决在异步末尾做一些事情的封装</p> <p>=&gt; Promise 就是一种优雅的对于异步代码封装的方案</p> </li> </ul> <pre><code class="prism language-javascript"><span class="token comment">// 为什么需要回调函数</span><span class="token comment">// 封装一段代码</span><span class="token comment">// 例子 : 外卖公司做好的事情</span><span class="token keyword">function</span><span class="token function">waimai</span><span class="token punctuation">(</span><span class="token parameter">beizhu</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 获取一个 1000 ~ 6000 的随机整数</span><span class="token keyword">const</span> time<span class="token operator">=</span><span class="token number">1000</span><span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">' 在路上 '</span><span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token comment">// 我们使用 setTimeout 模拟一个网络环境请求</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'到达店里了, 拿到外卖'</span><span class="token punctuation">)</span><span class="token comment">// 直接把我需要执行的代码放在这个位置</span><span class="token comment">// 那么这个封装就没有意义了</span><span class="token comment">// 就需要用到回调函数了</span><span class="token comment">// 因为这个位置是异步的末尾了</span><span class="token comment">// 这个位置调用 beizhu 就是在异步的末尾调用</span><span class="token comment">// 例 : 不管什么时候到了店里</span><span class="token comment">// 拿到外卖以后, 把 备注 的内容执行一下</span><span class="token function">beizhu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 用户的需求: 想多拿一双筷子</span><span class="token function">waimai</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'多拿一双筷子'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 用户的需求: 想多拿点辣椒</span><span class="token function">waimai</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'多拿点辣椒'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/04850bcde8dcafe751a2aba4a6fbbd44.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <h2><a id="2__116" rel="nofollow"></a>2. 回调地狱</h2> <h3><a id="_117" rel="nofollow"></a>理解</h3> <ul> <li> <p>一种使用回调函数封装的代码时候的情况</p> </li> <li> <p>回调函数的使用是有 函数嵌套 在里面的</p> </li> <li> <p>当你大量使用回调函数封装的代码的时候, 会出现 结构紊乱</p> <p>=&gt; 不利于代码的阅读和维护</p> </li> <li> <p>为了解决回调地狱</p> <p>=&gt; ES6 的语法内出现了一个新的语法, 叫做 Promise</p> <p>=&gt; 为了把 异步代码 封装变成 Promise 语法的封装</p> <p>=&gt; 不再使用 回调函数 来封装 异步代码了</p> <p>=&gt; 本质: 用来 封装异步代码 的</p> </li> </ul> <h3><a id="__136" rel="nofollow"></a>实现需求 :</h3> <ol> <li> <p>发送一个请求, 请求一个接口</p> <p>=&gt; 等到响应回来以后</p> <p>=&gt; 把内容打印在控制台</p> </li> <li> <p>发送第二个请求, 请求第二个接口</p> <p>=&gt; 要求必须要在第一个请求结束以后, 打印完毕以后再次发送请求</p> <p>=&gt; 把响应内容打印在控制台</p> </li> <li> <p>发送第三个请求, 请求第三个接口</p> <p>=&gt; 要求, 必须要在第二个请求结束以后, 打印完毕以后再次发送请求</p> <p>=&gt; 把响应内容打印在控制台</p> </li> </ol> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"jquery.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token comment">// 实现需求 1 :</span> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/first'</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一次请求的结果'</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// 这个位置的代码执行的时候, 一定是第一个请求结束的时候</span><span class="token comment">// 需求2:</span>     $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/second'</span><span class="token punctuation">,</span>       dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二次请求的结果'</span><span class="token punctuation">)</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// 这个位置的代码执行的时候, 一定是第二个请求结束的时候</span><span class="token comment">// 需求3:</span>         $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>           url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/third'</span><span class="token punctuation">,</span>           data<span class="token operator">:</span><span class="token string">'name=Jack&amp;age=18'</span><span class="token punctuation">,</span>           dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三次请求的结果'</span><span class="token punctuation">)</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <blockquote> <p>这里的ajax用的是jquery</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/885819109b2ce9f87f9d58e25dcae128.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <h2><a id="3__Promise_193" rel="nofollow"></a>3. 认识 Promise</h2> <ul> <li> <p>是一个 ES6 出现的语法</p> </li> <li> <p>Promise 也是一个 JS 内置的 构造函数</p> </li> <li> <p>promise - 承诺 :</p> <ul> <li>承诺的状态有多少个 ?<br /> =&gt; 继续(持续执行过程中)<br /> =&gt; 成功<br /> =&gt; 失败</li> <li>承诺状态之间的转换 : 只能转换一次<br /> =&gt; 要么是 继续 转换成 成功<br /> =&gt; 要么是 继续 转换成 失败</li> </ul> </li> <li> <p>Promise 也有三个状态<br /> =&gt; 继续: pending<br /> =&gt; 成功: fulfilled<br /> =&gt; 失败: rejected</p> </li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// ...</span><span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 给当前这个承诺注册一个 成功以后的函数</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 给当前这个承诺注册一个 失败以后的函数</span> p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><strong>如何改变 promise 的状态</strong></p> <ul> <li>在 new Promise 的 a 函数内</li> <li>可以接受两个参数<br /> 1.第一个参数: 可以将该 Promise 的状态由继续转换为 成功<br /> 2.第二个参数: 可以将该 Promise 的状态由继续转换为 失败</li> </ul> <pre><code class="prism language-javascript"><span class="token comment">// 1. 异步代码</span><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// resolve 就是一个转换成功的方法</span><span class="token comment">// 当你书写 resolve() 的时候, 就是在把 该 promise 的状态转换为成功</span><span class="token comment">// 就会执行 .then 时候里面书写的 b 函数</span><span class="token comment">// reject 就是一个转换成失败的方法</span><span class="token comment">// 当你书写 reject() 的时候, 就是在把 该 promise 的状态转换为失败</span><span class="token comment">// 就会执行 .catch 时候里面书写的 c 函数</span><span class="token comment">// 这两个只能书写一个</span><span class="token comment">// 书写你需要封装的异步代码</span><span class="token keyword">const</span> time<span class="token operator">=</span><span class="token number">1000</span><span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'承诺一辈子在一起'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">&gt;=</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// resolve() 调用的是 then 内部的函数 b</span><span class="token comment">// 所以这里书写在 () 内部的 time 内容就是给到 then 内 b 的实参</span><span class="token function">resolve</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token comment">// reject() 调用的是 catch 内部的函数 c</span><span class="token comment">// 所以这里书写在 () 内部的 time 内容就是给到 catch 内 c 的实参, 也是报错信息</span><span class="token function">reject</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// promise 对象调用的两个方法</span><span class="token comment">// 注册 成功</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 函数 b 不会被直接调用的</span><span class="token comment">// 这个位置的代码会在 p 这个 promise 的状态由 继续 转换为 成功 的时候调用执行</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token string">'成功的函数 b'</span><span class="token punctuation">)</span><span class="token comment">// t 就是你在 promise 内部书写的 resolve 的小括号里面 time 的内容</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 注册 失败</span> p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 函数 c 不会被直接调用</span><span class="token comment">// 这个位置的代码会在 p 这个 promise 的状态由 继续 转换为 失败 的时候调用执行</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span><span class="token string">'失败的函数 c'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/9dbff0041903b1610029046d2cae9c98.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <h2><a id="4_Promise__278" rel="nofollow"></a>4. Promise 的进阶语法</h2> <ul> <li> <p>当一个 Promise 的 then 内的代码</p> </li> <li> <p>只要你在前一个 then 内部以 return 返回一个新的 promise 对象 的时候</p> </li> <li> <p>新 promise 对象的 then 可以直接在前一个 then 的后面继续书写 then</p> </li> </ul> <p><strong>需求:</strong></p> <ol> <li> <p>发送一个请求, 请求第一个接口</p> </li> <li> <p>发送第二个请求, 请求第二个接口<br /> =&gt; 前提: 必须要等到第一个请求结束以后再次发送</p> </li> </ol> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 执行 ajax</span>     $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span>       data<span class="token operator">:</span> options<span class="token punctuation">.</span>data<span class="token punctuation">,</span>       type<span class="token operator">:</span>options<span class="token punctuation">.</span>type<span class="token punctuation">,</span>       dataType<span class="token operator">:</span> options<span class="token punctuation">.</span>dataType<span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 把我的 promise 对象返回出去</span><span class="token keyword">return</span> p<span class="token punctuation">}</span></code></pre> <pre><code class="prism language-javascript"><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/first'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一个请求结束了'</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// return 一个新的 promise 对象</span><span class="token keyword">return</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/second'</span><span class="token punctuation">,</span>       dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二个请求结果'</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// return 一个新的 promise 对象</span><span class="token keyword">return</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/third'</span><span class="token punctuation">,</span>       data<span class="token operator">:</span><span class="token string">'name=Jack&amp;age=20'</span><span class="token punctuation">,</span>       dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三次请求的结果'</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/c7be87cd95fca9d0c1045d0464500903.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <h2><a id="5_async___await__345" rel="nofollow"></a>5. async 函数 和 await 关键字</h2> <ul> <li> <p>ES7 ~ ES8 之间出现的语法</p> </li> <li> <p>作用 :</p> </li> <li> <p>为了解决 Promise 的问题 , 把 Promise 的代码书写的更优雅</p> </li> <li> <p>核心作用: 把 异步代码 写的 看起来像 同步代码, 本质还是异步</p> </li> </ul> <p><strong>语法:</strong></p> <p>=&gt; async 关键字 (异步)</p> <ul> <li>使用: 书写在函数的前面</li> </ul> <p>(可以是声明式函数, 可以是函数表达式, 可以是箭头函数)</p> <pre><code class="prism language-javascript"><span class="token comment">// async 的语法</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">const</span><span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">const</span><span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token keyword">async</span><span class="token parameter">a</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></code></pre> <p><strong>作用:</strong></p> <ol> <li> <p>该函数内可以使用 await 关键字了</p> </li> <li> <p>会把该函数变成一个 异步函数, 只是叫做 异步函数</p> <p>(这个异步函数并不是我们真实的异步代码,只是给这个函数起了个名字)</p> <p>=&gt; 影响的是函数内部的代码 , 不影响函数外面的代码</p> </li> </ol> <p><strong>await 关键字 (等待)</strong></p> <ul> <li>要求:</li> </ul> <ol> <li> <p>await 必须写在一个有 async 关键字的异步函数内部</p> </li> <li> <p>await 后面等待的内容必须是一个 promise 对象 , 否则等不了</p> </li> </ol> <ul> <li> <p>作用:</p> <p>=&gt; 把 promise 中本该在 then 内代码接受的结果 ,</p> <p>可以直接在 await 前面定义变量接受</p> <p>=&gt; 后续的代码需要等到 promise 执行完毕才会执行</p> </li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 执行 ajax</span>     $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span>       data<span class="token operator">:</span> options<span class="token punctuation">.</span>data<span class="token punctuation">,</span>       type<span class="token operator">:</span>options<span class="token punctuation">.</span>type<span class="token punctuation">,</span>       dataType<span class="token operator">:</span> options<span class="token punctuation">.</span>dataType<span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 把我的 promise 对象返回出去</span><span class="token keyword">return</span> p<span class="token punctuation">}</span></code></pre> <pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token comment">// ① start</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 fn 函数内部的代码'</span><span class="token punctuation">)</span><span class="token comment">// ②</span><span class="token comment">// 因为 myPromiseAjax是按照 promise 的语法形式进行封装的代码</span><span class="token comment">// myPromiseAjax会返回一个 promise 对象</span><span class="token comment">// fn 函数内, 执行到 myPromiseAjax这个代码的时候</span><span class="token comment">// 会等待, 等到这个异步的代码完全执行完毕, 把结果赋值给 r1 以后</span><span class="token comment">// 在继续执行后面的代码</span><span class="token keyword">const</span> r1<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/first'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token comment">// ④</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token comment">// ③ end</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/ebb6dca6461ba646f1cd282ba6386e50.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 fn 函数内部的代码'</span><span class="token punctuation">)</span><span class="token comment">// 此时 fn 函数内可以使用 await 关键字了</span><span class="token comment">// myPromiseAjax返回出来的 promise 对象会执行</span><span class="token comment">// 把 resolve() 的时候 括号里面的内容 赋值给 r1. 在继续向后执行代码</span><span class="token keyword">const</span> r1<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/first'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token comment">// // 需求2:</span><span class="token keyword">const</span> r2<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/second'</span><span class="token punctuation">,</span>     dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token comment">// 需求3:</span><span class="token keyword">const</span> r3<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/third'</span><span class="token punctuation">,</span>     data<span class="token operator">:</span><span class="token string">'name=Jack&amp;age=20'</span><span class="token punctuation">,</span>     dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/104f1938c3b7e3090cb04d5e33dd8667.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-72181.htm">宠物猫疫苗要多少钱一次（宠物猫疫苗多少钱打一次）</a></p>
                                        <p>下一个：<a href="/news/article-72849.htm">通过源码了解Java的自动装箱拆箱</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-39953.htm" title="在同一个类中，一个方法调用另外一个有注解（比如@Async，@Transational）的方法，注解失效的原因和解决方法">在同一个类中，一个方法调用另外一个有注解（比如@Async，@Transational）的方法，注解失效的原因和解决方法</a></li>
                        <li class="py-2"><a href="/news/article-59170.htm" title="北农动物医院大众点评官网（北农动物医院大众点评官网电话）">北农动物医院大众点评官网（北农动物医院大众点评官网电话）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-26-clash-node.htm" title="2月26日最新机场订阅 | 20.7M/S|2025年Clash/SSR/Shadowrocket/V2ray免费节点地址链接分享">2月26日最新机场订阅 | 20.7M/S|2025年Clash/SSR/Shadowrocket/V2ray免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-43429.htm" title="兽用疫苗种类（兽用疫苗种类及类型）">兽用疫苗种类（兽用疫苗种类及类型）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-29-free-high-speed-nodes.htm" title="1月29日最新机场订阅 | 19.6M/S|2025年Clash/V2ray/SSR/Shadowrocket免费节点地址链接分享">1月29日最新机场订阅 | 19.6M/S|2025年Clash/V2ray/SSR/Shadowrocket免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-54122.htm" title="纹绣美甲美睫培训学校哪家好（领绣集团纹绣培训学院）">纹绣美甲美睫培训学校哪家好（领绣集团纹绣培训学院）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-5-free-clash.htm" title="3月5日最新机场订阅 | 20.2M/S|2025年Shadowrocket/Clash/SSR/V2ray免费节点地址链接分享">3月5日最新机场订阅 | 20.2M/S|2025年Shadowrocket/Clash/SSR/V2ray免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-59742.htm" title="杨氏矩阵详解">杨氏矩阵详解</a></li>
                        <li class="py-2"><a href="/news/article-63889.htm" title="【Mysql】- binlog 日志解析">【Mysql】- binlog 日志解析</a></li>
                        <li class="py-2"><a href="/news/article-63273.htm" title="安徽淮北宠物救助站（淮北动物救助站）">安徽淮北宠物救助站（淮北动物救助站）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">45</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">66</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </section>
        </div>
    </main>
    <!--Main layout-->
        <!--Footer-->
    <footer class="page-footer text-center font-small mt-4 wow fadeIn">
        <!--Copyright-->
        <div class="footer-copyright py-3">
            <p>
                <a href="/">首页</a> |
                <a href="/free-node/">免费节点</a> |
                <a href="/news/">新闻资讯</a> |
                <a href="/about-us.htm">关于我们</a> |
                <a href="/disclaimer.htm">免责申明</a> |
                <a href="/privacy.htm">隐私申明</a> |
                <a href="/sitemap.xml">网站地图</a>
            </p>
            <p class="text-white-50 f-15 mb-0">
                <a href="/">Clash Daily免费订阅地址每日更新</a> 版权所有 Powered by WordPress
            </p>
        </div>
        <!--/.Copyright-->
    </footer>
    <!--/.Footer-->
    <!-- SCRIPTS -->
    <!-- JQuery -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/jquery-3.4.1.min.js"></script>
    <!-- Bootstrap tooltips -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/popper.min.js"></script>
    <!-- Bootstrap core JavaScript -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/bootstrap.min.js"></script>
    <!-- MDB core JavaScript -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/mdb.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>