<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashdaily.github.io/news/article-60888.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>Vue路由router详细总结</title>
        <meta name="description" content="Vue路由router详细总结  模块化的方式使用路由插件 使用路由   声明式导航 编程式导航   动态路由匹配 通配符匹配路径 查询参数query 响应路由参数的变化 命名路由，路由别名，重定向 " />
        <link rel="icon" href="/assets/website/img/clashdaily/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Daily免费订阅地址每日更新">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashdaily.github.io/news/article-60888.htm" />
    <meta property="og:site_name" content="Clash Daily免费订阅地址每日更新" />
    <meta property="og:title" content="Vue路由router详细总结" />
    <meta property="og:image" content="https://clashdaily.github.io/uploads/20250110/cf5afa812c2615e5db9ceccd12a1f33a.webp" />
        <meta property="og:release_date" content="2025-02-22T07:10:47" />
    <meta property="og:updated_time" content="2025-02-22T07:10:47" />
        <meta property="og:description" content="Vue路由router详细总结  模块化的方式使用路由插件 使用路由   声明式导航 编程式导航   动态路由匹配 通配符匹配路径 查询参数query 响应路由参数的变化 命名路由，路由别名，重定向 " />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Vue路由router详细总结">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="/assets/website/css/clashdaily/all.css">
    <!-- Bootstrap core CSS -->
    <link href="/assets/website/css/clashdaily/bootstrap.min.css" rel="stylesheet">
    <!-- Material Design Bootstrap -->
    <link href="/assets/website/css/clashdaily/mdb.min.css" rel="stylesheet">
    <!-- Your custom styles (optional) -->
    <link href="/assets/website/css/clashdaily/style.min.css" rel="stylesheet">
    <style type="text/css">
    html,
    body,
    header,
    .carousel {
        height: 60vh;
    }

    @media (max-width: 740px) {

        html,
        body,
        header,
        .carousel {
            height: 100vh;
        }
    }

    @media (min-width: 800px) and (max-width: 850px) {

        html,
        body,
        header,
        .carousel {
            height: 100vh;
        }
    }

    @media (min-width: 800px) and (max-width: 850px) {
        .navbar:not(.top-nav-collapse) {
            background: #1C2331 !important;
        }
    }
    </style>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-QCN2RGZW4R"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-QCN2RGZW4R');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Navbar -->
    <nav class="navbar fixed-top navbar-expand-lg navbar-dark scrolling-navbar">
        <div class="container">
            <!-- Brand -->
            <a class="navbar-brand xcblog-blog-logo" href="/">
                                <span>Clash Daily</span>
                            </a>
            <!-- Collapse -->
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <!-- Links -->
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <!-- Left -->
                <ul class="navbar-nav mr-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>

            </div>
        </div>
    </nav>
    <!-- Navbar -->
    <!--Carousel Wrapper-->
    <div id="carousel-example-1z" class="carousel slide carousel-fade" data-ride="carousel">
        <!--Slides-->
        <div class="carousel-inner" role="listbox">
            <div class="carousel-item active">
                <div class="view" style="background-image: url(/assets/website/img/clashdaily/93.jpg); background-repeat: no-repeat; background-size: cover;">
                    <!-- Mask & flexbox options-->
                    <div class="mask rgba-black-light d-flex justify-content-center align-items-center">
                        <!-- Content -->
                        <div class="text-center white-text mx-5 wow fadeIn">
                            <h1 class="mb-4">
                                Vue路由router详细总结                            </h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                            </p>
                        </div>
                        <!-- Content -->
                    </div>
                    <!-- Mask & flexbox options-->
                </div>
            </div>
        </div>
        <!--/.Slides-->
    </div>
    <!--/.Carousel Wrapper-->
    <!--Main layout-->
    <main>
        <div class="container">
            <section class="mt-5">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>Vue路由router详细总结</h3> <ul> <li><a href="#_1" rel="nofollow">模块化的方式使用路由插件</a></li> <li><a href="#_39" rel="nofollow">使用路由</a></li> <li> <ul> <li><a href="#_40" rel="nofollow">声明式导航</a></li> <li><a href="#_65" rel="nofollow">编程式导航</a></li> </ul> </li> <li><a href="#_94" rel="nofollow">动态路由匹配</a></li> <li><a href="#_125" rel="nofollow">通配符匹配路径</a></li> <li><a href="#query_139" rel="nofollow">查询参数query</a></li> <li><a href="#_149" rel="nofollow">响应路由参数的变化</a></li> <li><a href="#_173" rel="nofollow">命名路由，路由别名，重定向</a></li> <li><a href="#_244" rel="nofollow">嵌套路由</a></li> <li><a href="#_287" rel="nofollow">命名视图</a></li> <li><a href="#_308" rel="nofollow">导航守卫</a></li> <li> <ul> <li><a href="#1_309" rel="nofollow">（1）全局守卫</a></li> <li><a href="#2_355" rel="nofollow">（2）路由独享守卫</a></li> <li><a href="#3_359" rel="nofollow">（3）组件内守卫</a></li> <li><a href="#_412" rel="nofollow">导航解析的流程</a></li> </ul> </li> </ul> </div> </h1> <p>（1）安装</p> <pre><code class="prism language-javascript">npm install vue<span class="token operator">-</span>router </code></pre> <p>（2）构建文件目录<br /> 在src目录下创建一个router文件夹，然后创建一个index.js<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230119/50305afd48de40f3d64d86ade4eb67b3.jpg" alt="Vue路由router详细总结"><br /> （3）这里我们通过模块化的方式进行创建路由，方便代码的管理，这里只是对路插件进行了注册，然后创建好路由对象。通过export default 关键字将创建好的路由对象暴露出去。</p> <pre><code class="prism language-javascript"><span class="token comment">//index.js</span> <span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span> <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"../views/Home"</span><span class="token punctuation">;</span> Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment">//注册路由插件</span> <span class="token keyword">export</span> <span class="token keyword">default</span>  <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     routes<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>         path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>         component<span class="token operator">:</span>Home     <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> <p>（4）在入口文件main.js引入创建好的路由对象，并且把他挂载到Vue实例中。</p> <pre><code class="prism language-javascript"><span class="token comment">//main.js</span> <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span> <span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store'</span> <span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router'</span><span class="token comment">//这里就是引入了我们创建好的路由对象。模块化的编程思维</span> Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   store<span class="token punctuation">,</span>   router<span class="token punctuation">,</span>   <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span> </code></pre> </h1> <h2> <a id="_40" rel="nofollow"></a>声明式导航</h2> <p><code>可以理解成，通过标签进行跳转</code><br /> 声明式导航:<code>&lt;router-link :to="..."&gt; 或者 &lt;router-link to="..."&gt;</code><br /> 定义路由规则</p> <pre><code class="prism language-javascript"> <span class="token punctuation">{<!-- --></span>         path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>         component<span class="token operator">:</span>Home         name<span class="token operator">:</span>home     <span class="token punctuation">}</span> </code></pre> <p>（1）router-link导航标签to属性使用字符串方式</p> <pre><code class="prism language-javascript"> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">&gt;</span>go to home<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> </code></pre> <p>（2）router-link导航标签to使用对象的方式</p> <ul> <li>使用路径进行匹配</li> </ul> <pre><code class="prism language-javascript"> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"{path:'/'}"</span><span class="token operator">&gt;</span>go to home<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> </code></pre> <ul> <li>router-link导航标签to属性使用对象的方式并且使用路由名称进行匹配</li> </ul> <pre><code class="prism language-javascript"> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"{name:'home'}"</span><span class="token operator">&gt;</span>go to home<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> </code></pre> <h2> <a id="_65" rel="nofollow"></a>编程式导航</h2> <p><code>可以理解成JS进行跳转</code></p> <p>编程式导航:<code>router.push(...)</code><br /> 下面的例子包含了动态路由匹配和query查询参数的知识，不清楚的可以先看了这两者的内容再回来看此处的内容。</p> <pre><code class="prism language-javascript"><span class="token comment">// 字符串</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span>  <span class="token comment">// 对象</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> <span class="token string">'home'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 命名的路由</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> name<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{<!-- --></span> userId<span class="token operator">:</span> <span class="token string">'123'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 带查询参数，变成 /register?plan=private</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> <span class="token string">'register'</span><span class="token punctuation">,</span> query<span class="token operator">:</span> <span class="token punctuation">{<!-- --></span> plan<span class="token operator">:</span> <span class="token string">'private'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> <p>注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 与params配合或手写完整的带有参数的 path：</p> <pre><code class="prism language-javascript"><span class="token keyword">const</span> userId <span class="token operator">=</span> <span class="token string">'123'</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> name<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{<!-- --></span> userId <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; /user/123</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; /user/123</span> <span class="token comment">// 这里的 params 不生效</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{<!-- --></span> userId <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; /user</span> </code></pre> </h1> <p>定义路由规则</p> <pre><code class="prism language-javascript"> <span class="token punctuation">{<!-- --></span>         path<span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>         component<span class="token operator">:</span>User         name<span class="token operator">:</span>user     <span class="token punctuation">}</span> </code></pre> <pre><code class="prism language-javascript"> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/user/01"</span><span class="token operator">&gt;</span>go to home<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> </code></pre> <pre><code class="prism language-javascript"> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"{path:'/user/01'}"</span><span class="token operator">&gt;</span>go to home<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> </code></pre> <pre><code class="prism language-javascript"> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"{name:'/user',params={id:'01'}}"</span><span class="token operator">&gt;</span>go to home<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> </code></pre> <p><code>通过如上的方式进行定义，可以通过$route.params.id 获动态路由参数:id值为’01‘</code><br /><em>注意：<br /> 当使用对象的方式进行匹配时候，不能通过path和params的方式。只能通过name和params的方式</em></p> <p>如下方式，不能匹配到路由规则<code>{path:'/user/:id'}</code> ，如下表述只能被理解成’/user’，<br /> 即使通过*通配符匹配到该路由，params也不会被传递过去，因为要有path这个属性就不会去解析params的属性了。</p> <pre><code class="prism language-javascript"> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"{path:'/user',params={id:'01'}}"</span><span class="token operator">&gt;</span>go to home<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> </code></pre> </h1> <p>我们通常使用*捕获其他意外的路径，进行个兜底的处理，通常将其导航到404错误页面。</p> <pre><code class="prism language-javascript"><span class="token punctuation">{<!-- --></span>   <span class="token comment">// 会匹配所有路径</span>   path<span class="token operator">:</span> <span class="token string">'*'</span> <span class="token punctuation">}</span> <span class="token punctuation">{<!-- --></span>   <span class="token comment">// 会匹配以 `/user-` 开头的任意路径</span>   path<span class="token operator">:</span> <span class="token string">'/user-*'</span> <span class="token punctuation">}</span> </code></pre> <p><code>当使用一个通配符时，$route.params 内会自动添加一个名为 pathMatch 参数。它包含了 URL 通过通配符被匹配的部分</code></p> </h1> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span>“<span class="token operator">/</span>user<span class="token operator">?</span>name<span class="token operator">=</span>zhangsan"<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"{path:'/user?zhangsan'}"</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"{path:'/user',query:{name:'zhangsan'}}"</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"{name:'user',query:{name:'zhangsan'}}"</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> </code></pre> <p>查询参数不想动态路由参数匹配那样，就算使用了path，依然可以使用query进行传参;<br /> 以上query传递过来的参数可以通过<code>this.$route.query.name</code>进行获取。</p> </h1> <p>如果路由从<code>/user/01</code>导航到<code>/user/02</code>，原来的组件实例会被复用。因为有两个路由都渲染同一个组件，这意味着组件的生命周期钩子不会被再次调用。因此需要通过其他方式进行监听参数的变化来做出响应。<br /> （1）通过watch进行监听</p> <pre><code class="prism language-javascript"><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>   template<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>   watch<span class="token operator">:</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">$route</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       <span class="token comment">// 对路由变化作出响应...</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>（2）通过导航守卫进行监听</p> <pre><code class="prism language-javascript"><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>   template<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>   <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// react to route changes...</span>     <span class="token comment">// don't forget to call next()</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> </h1> <p>特别地我把这三者的概念放在一起来阐述，是为了更好的去区分他们之间的区别。<code>这些内容都是在路由规则去配置的</code>。</p> <pre><code class="prism language-javascript"><span class="token punctuation">{<!-- --></span>         path<span class="token operator">:</span> <span class="token string">'/pageOne'</span><span class="token punctuation">,</span>         component<span class="token operator">:</span>PageOne<span class="token punctuation">,</span>         alias<span class="token operator">:</span><span class="token string">"/firstPage"</span><span class="token punctuation">,</span>         name<span class="token operator">:</span><span class="token string">"pageOne"</span><span class="token punctuation">,</span>         redirect<span class="token operator">:</span><span class="token punctuation">{<!-- --></span>name<span class="token operator">:</span><span class="token string">'pageTwo'</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{<!-- --></span>         path<span class="token operator">:</span> <span class="token string">'/pageTwo'</span><span class="token punctuation">,</span>         component<span class="token operator">:</span>PageTwo<span class="token punctuation">,</span>         name<span class="token operator">:</span><span class="token string">'pageTwo'</span>     <span class="token punctuation">}</span> </code></pre> <p>（1）命名路由：可以理解成给这个路由取个名字<br /> 即使通过name属性给路由取一个名字</p> <pre><code class="prism language-javascript">routes<span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{<!-- --></span>       path<span class="token operator">:</span> <span class="token string">'/user/:userId'</span><span class="token punctuation">,</span>       name<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>       component<span class="token operator">:</span> User     <span class="token punctuation">}</span>   <span class="token punctuation">]</span> </code></pre> <p>（2）路由别名：可以理解成这个路由的第二个名字。<br /> 例如：<code>/a</code>的别名是<code>/b</code>,当用户访问/b的时候，URL会保持/b但是路由匹配到的内容则为/a，也就是知识URL内容显示<code>/b</code>内容实则是<code>/a</code><br /> 注意了：这里别名要使用路径的方式去表述，而不是跟命名路由那样直接写名字哦~</p> <pre><code class="prism language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   routes<span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> <span class="token string">'/a'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">,</span> alias<span class="token operator">:</span> <span class="token string">'/b'</span> <span class="token punctuation">}</span>   <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> <p>（3）重定向：可以理解为访问<code>/a</code>的时候直接跳转到<code>/b</code><br /> 重定向的表述有三种形式：</p> <ul> <li>字符串</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   routes<span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> <span class="token string">'/a'</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">'/b'</span> <span class="token punctuation">}</span>   <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> <ul> <li>对象</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   routes<span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> <span class="token string">'/a'</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token punctuation">{<!-- --></span> name<span class="token operator">:</span> <span class="token string">'foo'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> <ul> <li>方法</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   routes<span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> <span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token function-variable function">redirect</span><span class="token operator">:</span> <span class="token parameter">to</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>       <span class="token comment">// 方法接收 目标路由 作为参数</span>       <span class="token comment">// return 重定向的 字符串路径/路径对象</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> </h1> <p>嵌套路由可以这么理解，所匹配的路由渲染出来的组件中包含路由组件，’/user’当我们匹配到一个路由渲染出一个组件User，但是如果想继续在User组件的<code>&lt;router-view &gt;&lt;/router-view&gt;</code>继续匹配。则我们要通过<code>/user/childRouteName</code>进一步匹配。"childRouteName"就是我们路由规则children中对应的path的值啦。</p> <pre><code class="prism language-javascript"> <span class="token punctuation">{<!-- --></span>       path<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>       component<span class="token operator">:</span> User<span class="token punctuation">,</span>       children<span class="token operator">:</span> <span class="token punctuation">[</span>         <span class="token punctuation">{<!-- --></span>           <span class="token comment">// 当 /user//profile 匹配成功，</span>           <span class="token comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span>           path<span class="token operator">:</span> <span class="token string">'profile'</span><span class="token punctuation">,</span>           component<span class="token operator">:</span> UserProfile         <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{<!-- --></span>           <span class="token comment">// 当 /user//posts 匹配成功</span>           <span class="token comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span>           path<span class="token operator">:</span> <span class="token string">'posts'</span><span class="token punctuation">,</span>           component<span class="token operator">:</span> UserPosts         <span class="token punctuation">}</span>       <span class="token punctuation">]</span>     <span class="token punctuation">}</span> </code></pre> <p>APP.Vue中</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> </code></pre> <p>User组件中</p> <pre><code class="prism language-javascript"><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>   template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">     &lt;div class="user"&gt;       &lt;span&gt;User组件&lt;/span&gt;       &lt;router-view&gt;&lt;/router-view&gt;     &lt;/div&gt;   </span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span> </code></pre> <p>注意：<br /> 定义了嵌套路由，即定义了children的情况下，必须是完整的路由才可以匹配正确。也就是 当 <code>/user/profile</code>匹配成功，但是<code>/user</code>这样是无法匹配成功的。</p> </h1> <p>当一个组件上同时渲染多个视图，注意是同级展示多个视图，而不是嵌套展示。那此时就可以通过命名视图来解决这个问题。<br /> 路由规则定义</p> <pre><code class="prism language-javascript"><span class="token punctuation">{<!-- --></span>         path<span class="token operator">:</span><span class="token string">"/namingRoute"</span><span class="token punctuation">,</span>         components<span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//注意此处components是带's'结尾的，之前单个的时候是不带的。</span>             <span class="token keyword">default</span><span class="token operator">:</span>Home<span class="token punctuation">,</span>             one<span class="token operator">:</span>PageOne<span class="token punctuation">,</span>             two<span class="token operator">:</span>PageTwo         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> </code></pre> <p>组件定义</p> <pre><code class="prism language-javascript"> 	<span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token comment">//渲染default对应的组件</span>     <span class="token operator">&lt;</span>router<span class="token operator">-</span>view name<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token comment">//渲染one对应的组件</span>     <span class="token operator">&lt;</span>router<span class="token operator">-</span>view name<span class="token operator">=</span><span class="token string">"two"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token comment">//渲染two对应的组件</span> </code></pre> <p>当URL为:<code>/namingRoute</code>的时候 匹配到该路由，则会按照对应的router-view视图组件进行渲染。</p> </h1> <h2> <a id="1_309" rel="nofollow"></a>（1）全局守卫</h2> <p>可以理解成通过全局router实例对象router进行定义的守卫。</p> <ul> <li> <strong>route.beforeEach</strong>（全局前置守卫）</li> </ul> <p>使用方式：</p> <pre><code class="prism language-javascript"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span> 	<span class="token comment">//...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> <ul> <li> <strong>router.beforeResolve</strong>（全局解析守卫）</li> </ul> <p>在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用<br /> 使用方式：</p> <pre><code class="prism language-javascript">router<span class="token punctuation">.</span><span class="token function">beforeResolve</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>   <span class="token comment">// ...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> <ul> <li> <strong>router.afterEach</strong> （全局后置钩子）</li> </ul> <p>钩子不会接受 next 函数也不会改变导航本身：<br /> 使用方式：</p> <pre><code class="prism language-javascript">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>   <span class="token comment">// ...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> <pre><code>使用的位置：通常在router文件夹下的index.js  const router = new VueRouter({ ... }) //全局前置守卫 router.beforeEach((to, from, next) =&gt; {   // ... }) //全局解析守卫 router.beforeResolve((to, from, next) =&gt; {   // ... }) //全局后置钩子 router.afterEach((to, from) =&gt; {   // ... }) </code></pre> <h2> <a id="2_355" rel="nofollow"></a>（2）路由独享守卫</h2> <p>可以理解成在路由规则上定义的守卫</p> <ul> <li><strong>beforeEnter</strong></li> </ul> <h2> <a id="3_359" rel="nofollow"></a>（3）组件内守卫</h2> <p>可以理解成在组件内定义的守卫</p> <ul> <li> <strong>beforeRouteEnter</strong><br /> 还没有创建组件实例，在该路由被confirm前调用。</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>   template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>   <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// 在渲染该组件的对应路由被 confirm 前调用</span>     <span class="token comment">// 不！能！获取组件实例 `this`</span>     <span class="token comment">// 因为当守卫执行前，组件实例还没被创建</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>注意：<br /> 该守卫不能直接使用<code>this</code>访问vue实例对象，因为此时组件实例还没有被创建。但是可以通过给next方法传递回调来方位组件的实例。<br /><code>给next()传递回调，仅在beforeRouteEnter使用有效！！！</code></p> <pre><code class="prism language-javascript"><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>   <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// 通过 `vm` 访问组件实例</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <ul> <li> <strong>beforeRouteUpdate (2.2 新增)</strong><br /> 在路由改变且该组件被服用时调用</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>   template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// 在当前路由改变，但是该组件被复用时调用</span>     <span class="token comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>     <span class="token comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>     <span class="token comment">// 可以访问组件实例 `this`</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <ul> <li> <strong>beforeRouteLeave</strong><br /> 在导航离开该组件对应的路由时调用</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>   template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// 导航离开该组件的对应路由时调用</span>     <span class="token comment">// 可以访问组件实例 `this`</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h2> <a id="_412" rel="nofollow"></a>导航解析的流程</h2> <p>正常首次访问路由的执行顺序</p> <ul> <li>beforeEach 全局的路由前置守卫</li> <li>beforeEnter 独享路由守卫</li> <li>beforeRouteEnter 组件路由守卫</li> <li>beforeResolve 全局路由解析守卫</li> <li>afterEach 全局路由后置钩子</li> <li>Dom渲染</li> <li>调用beforeRouteEnter 组件路由守卫中传递给<code>next</code>的回调函数。并且把创建号的组件实例作为回调函数的参数传入。</li> </ul> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-60313.htm">农大动物医院有夜间急诊吗 农大动物医院有夜间急诊吗多少钱</a></p>
                                        <p>下一个：<a href="/news/article-60889.htm">天津宠物寄养多少钱一天（天津宠物寄养服务价格）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-44905.htm" title="动物诊所起名（动物诊所属于什么行业）">动物诊所起名（动物诊所属于什么行业）</a></li>
                        <li class="py-2"><a href="/news/article-46381.htm" title="南京哪里可以免费领养猫咪的地方（南京哪里能领养猫）">南京哪里可以免费领养猫咪的地方（南京哪里能领养猫）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-13-node-share.htm" title="2月13日最新机场订阅 | 18.2M/S|2025年Shadowrocket/Clash/SSR/V2ray免费节点地址链接分享">2月13日最新机场订阅 | 18.2M/S|2025年Shadowrocket/Clash/SSR/V2ray免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-21-clash-v2ray-ss-ssr.htm" title="1月21日最新机场订阅 | 21.5M/S|2025年Shadowrocket/Clash/V2ray/SSR免费节点地址链接分享">1月21日最新机场订阅 | 21.5M/S|2025年Shadowrocket/Clash/V2ray/SSR免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-15-free-ssr-subscribe.htm" title="2月15日最新机场订阅 | 18.1M/S|2025年Clash/Shadowrocket/SSR/V2ray免费节点地址链接分享">2月15日最新机场订阅 | 18.1M/S|2025年Clash/Shadowrocket/SSR/V2ray免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-45907.htm" title="小型宠物粮食加工设备有哪些品牌 小型宠物粮食加工设备有哪些品牌好">小型宠物粮食加工设备有哪些品牌 小型宠物粮食加工设备有哪些品牌好</a></li>
                        <li class="py-2"><a href="/news/article-42422.htm" title="厦门哪里可以免费领养猫（厦门免费领养猫正规网）">厦门哪里可以免费领养猫（厦门免费领养猫正规网）</a></li>
                        <li class="py-2"><a href="/news/article-54122.htm" title="纹绣美甲美睫培训学校哪家好（领绣集团纹绣培训学院）">纹绣美甲美睫培训学校哪家好（领绣集团纹绣培训学院）</a></li>
                        <li class="py-2"><a href="/news/article-54669.htm" title="同城免费领养宠物狗的平台（同城领养狗狗）">同城免费领养宠物狗的平台（同城领养狗狗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-25-free-node-subscribe.htm" title="1月25日最新机场订阅 | 18.3M/S|2025年Clash/SSR/V2ray/Shadowrocket免费节点地址链接分享">1月25日最新机场订阅 | 18.3M/S|2025年Clash/SSR/V2ray/Shadowrocket免费节点地址链接分享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">72</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">66</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </section>
        </div>
    </main>
    <!--Main layout-->
        <!--Footer-->
    <footer class="page-footer text-center font-small mt-4 wow fadeIn">
        <!--Copyright-->
        <div class="footer-copyright py-3">
            <p>
                <a href="/">首页</a> |
                <a href="/free-node/">免费节点</a> |
                <a href="/news/">新闻资讯</a> |
                <a href="/about-us.htm">关于我们</a> |
                <a href="/disclaimer.htm">免责申明</a> |
                <a href="/privacy.htm">隐私申明</a> |
                <a href="/sitemap.xml">网站地图</a>
            </p>
            <p class="text-white-50 f-15 mb-0">
                <a href="/">Clash Daily免费订阅地址每日更新</a> 版权所有 Powered by WordPress
            </p>
        </div>
        <!--/.Copyright-->
    </footer>
    <!--/.Footer-->
    <!-- SCRIPTS -->
    <!-- JQuery -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/jquery-3.4.1.min.js"></script>
    <!-- Bootstrap tooltips -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/popper.min.js"></script>
    <!-- Bootstrap core JavaScript -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/bootstrap.min.js"></script>
    <!-- MDB core JavaScript -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/mdb.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>