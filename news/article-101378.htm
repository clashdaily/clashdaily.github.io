<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashdaily.github.io/news/article-101378.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>JAVA多线程之同步容器&amp;并发容器</title>
        <meta name="description" content="在java早期，提供了Vector和HashTable两个同步容器，分别是List和Map的具体实现。 查看其源码，实现线程同步的方法是对每个公共使用synchronize关键字，在方法上实现同步。源" />
        <link rel="icon" href="/assets/website/img/clashdaily/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Daily免费订阅地址每日更新">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashdaily.github.io/news/article-101378.htm" />
    <meta property="og:site_name" content="Clash Daily免费订阅地址每日更新" />
    <meta property="og:title" content="JAVA多线程之同步容器&amp;并发容器" />
    <meta property="og:image" content="https://clashdaily.github.io/uploads/20250110/534fb3427c0445e58b030bfb616cfc3a.webp" />
        <meta property="og:release_date" content="2025-04-22T08:22:46" />
    <meta property="og:updated_time" content="2025-04-22T08:22:46" />
        <meta property="og:description" content="在java早期，提供了Vector和HashTable两个同步容器，分别是List和Map的具体实现。 查看其源码，实现线程同步的方法是对每个公共使用synchronize关键字，在方法上实现同步。源" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="JAVA多线程之同步容器&amp;并发容器">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="/assets/website/css/clashdaily/all.css">
    <!-- Bootstrap core CSS -->
    <link href="/assets/website/css/clashdaily/bootstrap.min.css" rel="stylesheet">
    <!-- Material Design Bootstrap -->
    <link href="/assets/website/css/clashdaily/mdb.min.css" rel="stylesheet">
    <!-- Your custom styles (optional) -->
    <link href="/assets/website/css/clashdaily/style.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <style type="text/css">
    html,
    body,
    header,
    .carousel {
        height: 60vh;
    }

    @media (max-width: 740px) {

        html,
        body,
        header,
        .carousel {
            height: 100vh;
        }
    }

    @media (min-width: 800px) and (max-width: 850px) {

        html,
        body,
        header,
        .carousel {
            height: 100vh;
        }
    }

    @media (min-width: 800px) and (max-width: 850px) {
        .navbar:not(.top-nav-collapse) {
            background: #1C2331 !important;
        }
    }
    </style>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-QCN2RGZW4R"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-QCN2RGZW4R');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Navbar -->
    <nav class="navbar fixed-top navbar-expand-lg navbar-dark scrolling-navbar">
        <div class="container">
            <!-- Brand -->
            <a class="navbar-brand xcblog-blog-logo" href="/">
                                <span>Clash Daily</span>
                            </a>
            <!-- Collapse -->
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <!-- Links -->
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <!-- Left -->
                <ul class="navbar-nav mr-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>

            </div>
        </div>
    </nav>
    <!-- Navbar -->
    <!--Carousel Wrapper-->
    <div id="carousel-example-1z" class="carousel slide carousel-fade" data-ride="carousel">
        <!--Slides-->
        <div class="carousel-inner" role="listbox">
            <div class="carousel-item active">
                <div class="view" style="background-image: url(/assets/website/img/clashdaily/93.jpg); background-repeat: no-repeat; background-size: cover;">
                    <!-- Mask & flexbox options-->
                    <div class="mask rgba-black-light d-flex justify-content-center align-items-center">
                        <!-- Content -->
                        <div class="text-center white-text mx-5 wow fadeIn">
                            <h1 class="mb-4">
                                JAVA多线程之同步容器&amp;并发容器                            </h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                            </p>
                        </div>
                        <!-- Content -->
                    </div>
                    <!-- Mask & flexbox options-->
                </div>
            </div>
        </div>
        <!--/.Slides-->
    </div>
    <!--/.Carousel Wrapper-->
    <!--Main layout-->
    <main>
        <div class="container">
            <section class="mt-5">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                <div class="xcblog-blog-detail">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> </h1> <p>在java早期，提供了Vector和HashTable两个同步容器，分别是List和Map的具体实现。<br /> 查看其源码，实现线程同步的方法是对每个公共使用synchronize关键字，在方法上实现同步。源码如下：</p> <pre><code class="prism language-java"><span class="token comment">//vector.add(e)</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">boolean</span><span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         elementData<span class="token punctuation">[</span>elementCount<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token comment">//hashTable.get(key)</span><span class="token keyword">public</span><span class="token keyword">synchronized</span> V<span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">&gt;</span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token keyword">int</span> hash<span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token punctuation">(</span>hash<span class="token operator">&amp;</span><span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span><span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">&gt;</span> e<span class="token operator">=</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> e<span class="token operator">!=</span> null<span class="token punctuation">;</span> e<span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token operator">==</span> hash<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>通过源代码可看出，这两个同步容器的实现非常简单，仅仅只是在执行方法上加上同步，那么其实这样做会产生一些问题。一是在一些符合操作的时候，并不是线程安全，例如如下代码：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> index<span class="token operator">=</span>vector<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         vector<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>在上段代码中，vector.size()和vector.add(e)都是同步方法，但是在执行m1()方法时，仍然会线程不安全，解决方法任然是在m1方法上加上同步，如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">void</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> index<span class="token operator">=</span>vector<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         vector<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>二是这种在公共方法加synchronized的方法，使得每个线程一个一个进入临界区，其实也就是相当于对普通的list或者map手动加synchronized或者lock，线程串行运行，降低并发性，效率低下。</p> <hr color="#000000" size="1&quot;"/> </h1> <p>上面说同步容器存在两个问题，那么使用并发容器可以有效地提高并发性。<br /> 并发容器跟同步容器比具有以下特点：</p> <ol> <li>有针对使用情境的设计，减少锁的使用。比如CopyOnWrite…，读并不加锁，写时复制。</li> <li>定义一些线程安全的符合操作。</li> <li>在迭代时，可以不加synchronized。但是会产生数据脏读。</li> </ol> <p>并发容器是juc包中提供的一系列容器类，里面包括了BlockingQueue（BlockingDeque是双向队列，姑且算是一类）和ConcurrentMap两个接口及其实现类，和一些CopyOnWriteXxx与ConcurrentXxx类</p> <p><strong>BlockingQueue</strong><br /> BlockingQueue主要有ArrayBlockingQueue，LinkedBlocking，SynchronousQueue三种实现<br /> 以ArrayBlockingQueue为例，看下具体使用和实现<br /> 使用示例：</p> <pre><code class="prism language-java"><span class="token comment">/**  * 阻塞队列  * 示例：生产消费问题  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">T08_BlockingQueue</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         BlockingQueue<span class="token generics function"><span class="token punctuation">&lt;</span>Object<span class="token punctuation">&gt;</span></span> queue<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Produce p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Produce</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>         Custom c<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Custom</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span><span class="token class-name">Thread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span><span class="token class-name">Thread</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span><span class="token class-name">Produce</span><span class="token keyword">implements</span><span class="token class-name">Runnable</span><span class="token punctuation">{<!-- --></span>      BlockingQueue<span class="token generics function"><span class="token punctuation">&lt;</span>Object<span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">;</span><span class="token function">Produce</span><span class="token punctuation">(</span>BlockingQueue<span class="token generics function"><span class="token punctuation">&lt;</span>Object<span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token operator">=</span>queue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>     Object<span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span><span class="token class-name">Custom</span><span class="token keyword">implements</span><span class="token class-name">Runnable</span><span class="token punctuation">{<!-- --></span>     BlockingQueue<span class="token generics function"><span class="token punctuation">&lt;</span>Object<span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">;</span><span class="token function">Custom</span><span class="token punctuation">(</span>BlockingQueue<span class="token generics function"><span class="token punctuation">&lt;</span>Object<span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token operator">=</span>queue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>上述代码实现了生产者和消费者模式，使用了put(e)和take()方法。查看源码，put和take方法源码如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{<!-- --></span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> ReentrantLock lock<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>         lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                 notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span>             lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> E<span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{<!-- --></span><span class="token keyword">final</span> ReentrantLock lock<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>         lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                 notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span>             lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>put和take执行逻辑如下：</p> <ul> <li>加锁</li> <li>判断当前队列是否已空（已满），若是，则当前线程等待</li> <li>若不是，添加（移除）元素，唤醒另一个condition线程</li> <li>释放锁</li> </ul> <p>观察BlockingQueue接口，不单单有put和take方法，还有add(e),offer(e),remove(),poll()等功功能相似的方法，其具体使用区别如下：</p> <table> <thead> <tr> <th></th> <th>抛出异常</th> <th>返回特殊值</th> <th>阻塞</th> <th>超时</th> </tr> </thead> <tbody> <tr> <td>插入</td> <td>add(e)</td> <td>offer(e)</td> <td>put(e)</td> <td>offer(e,time,unit)</td> </tr> <tr> <td>移除</td> <td>remove()</td> <td>poll()</td> <td>take()</td> <td>poll(time,unit)</td> </tr> <tr> <td>获取首个元素</td> <td>element()</td> <td>peek()</td> <td>–</td> <td>–</td> </tr> </tbody> </table> <p>BlockingQueue允许多个线程对其进行读写操作，与同步容器比，极大提高并发量。</p> <hr color="#000000" size="1&quot;"/> <p><strong>CopyOnWriteXxx</strong><br /> 在juc下。CopyOnWrite写时复制容器是一种常用的并发容器，它通过多线程下读写分离来达到提高并发性能的目的。也就是说在读的时候任何时候，任何线程都可以，无需加锁，但是写的时候需要加锁，且构造一个容器的Copy，在这个备份中进行操作，完成后将容器替换为新容器即可。<br /> CopyOnWriteXxx类有两个，CopyOnWriteArrayList和CopyOnWriteListSet，以CopyOnWriteArrayList为例进行分析。<br /> add(e)和get(index)源码如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">final</span> ReentrantLock lock<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token comment">//获取独占锁</span>         lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token operator">=</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//复制一份copy</span>             Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements<span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入数据</span>             newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//更新为容器</span><span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span><span class="token comment">//释放锁</span>             lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> E<span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//直接读取index位置上的数据</span><span class="token keyword">return</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>从源码可以看出，读取时（get）并没有对方法进行加锁，也就是说，任意线程都能够并发的访问数组数据，而在修改时（add），却要获得独占锁，也就是说同一时间只能有一个线程可以修改，而copy一份数组作为当前操作的对象，避免和读线程发生冲突。<br /> 从以上分析推出，CopyOnWrite要比同步容器的并发效率高很多，然而即便如此，仍然有其缺点和局限性：</p> <ul> <li>调用add时，需要开辟一段空间保存原数组备份，修改完后将指针指向当前备份数组，原数组会被GC。所以当高并发修改时，则会造成频繁的开辟空间和频繁GC,对性能有一点影响，这种情况CopyOnWrite并不适用；</li> <li>由于修改时是用的原数组的备份，则若此时有线程正在读取数据时，新的数组还没有更新，此时新修改的数据就不会被读取，因此，在对数据有较强一致性要求的情况下也不适用。</li> </ul> <hr color="#000000" size="1&quot;"/> <p><strong>ConcurrentMap</strong><br /> 在juc中，ConcurrentMap是提供线程安全性和原子性保证的Map。<br /> ConcurrentMap的实现类有两个，ConcurrentHashMap和ConcurrentSkipListMap，以ConcurrentHashMap为例进行分析，ConcurrentHashMap可以理解为HashMap的并发版本，它的底层实现仍然使用的是与HashMap一般的数组+链表+红黑树的实现数据结构，只是在操作上增加了并发控制。<br /> 与CopyOnWrite的锁机制不同，ConcurrentMap的锁的颗粒度更小，使用的是一种叫<strong>分段锁</strong>的东西。这种锁机制能够使得任意读取线程都能并发访问容器，同时且可以允许一定量的写线程并发修改容器。<br /> 所谓的分段锁，就是对容器内的数据分成若干段，对每一段数据分别进行加锁。毕竟多个线程修改的数据很有可能不在一块，当修改一块数据的时候却把所有数据锁住是不合适的。所以使用分段锁时，当多个线程分别修改不同段的数据时并不会造成冲突；<br /> 下面以put（）方法源码进行分析：</p> <pre><code class="prism language-java"><span class="token keyword">final</span> V<span class="token function">putVal</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span><span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span> null<span class="token operator">||</span> value<span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token keyword">throw</span><span class="token keyword">new</span><span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算桶的hash值，确定桶的位置</span><span class="token keyword">int</span> hash<span class="token operator">=</span><span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> binCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node<span class="token generics function"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span>V<span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             Node<span class="token generics function"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span>V<span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tab<span class="token operator">==</span> null<span class="token operator">||</span><span class="token punctuation">(</span>n<span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//</span>                 tab<span class="token operator">=</span><span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//若当前桶还么有元素，则cas式添加元素</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span><span class="token keyword">new</span><span class="token class-name">Node</span><span class="token generics function"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span>V<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">// no lock when adding to empty bin</span><span class="token punctuation">}</span><span class="token comment">//扩容时，帮助扩容</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fh<span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token operator">==</span> MOVED<span class="token punctuation">)</span>                 tab<span class="token operator">=</span><span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>                 V oldVal<span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment">//hash冲突时锁住当前需要添加节点的头元素</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token operator">==</span> f<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>fh<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                             binCount<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node<span class="token generics function"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span>V<span class="token punctuation">&gt;</span></span> e<span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">++</span>binCount<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                                 K ek<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token operator">==</span> hash<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ek<span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">==</span> key<span class="token operator">||</span><span class="token punctuation">(</span>ek<span class="token operator">!=</span> null<span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                                     oldVal<span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                         e<span class="token punctuation">.</span>val<span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                                 Node<span class="token generics function"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span>V<span class="token punctuation">&gt;</span></span> pred<span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                                     pred<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Node</span><span class="token generics function"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span>V<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                               value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token keyword">instanceof</span><span class="token class-name">TreeBin</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                             Node<span class="token generics function"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span>V<span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span>                             binCount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TreeBin<span class="token generics function"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span>V<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                            value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                                 oldVal<span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                     p<span class="token punctuation">.</span>val<span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>binCount<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>binCount<span class="token operator">&gt;=</span> TREEIFY_THRESHOLD<span class="token punctuation">)</span><span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>oldVal<span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token keyword">return</span> oldVal<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1</span>L<span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>put的执行逻辑如下：</p> <ol> <li>计算当前key的hash值，确定桶的位置</li> <li>若此时桶为空，则使用CAS操作插入新节点</li> <li>若此时正在扩容，则协助扩容。</li> <li>在发生hash冲突时仅仅只锁住当前需要添加节点的头元素即可，其他桶节点都不需要加锁，大大减小了锁粒度。</li> <li>添加节点，并调整至合适的结构（当前若是链表且长度过长时转为红黑树）<br /> ConcurrentHashMap使用的是CAS+synchronized实现并发控制，分段锁是针对每个桶加锁，也就是说访问不同桶中的数据多个线程可以并发访问。</li> </ol> </h1> <p>同步容器和并发容器都是java提供的在多线程环境下使用线程安全的容器，通过各种并发控制机制，都有其使用领域和局限性，使用的时候还是需要考虑考虑。</p> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-101377.htm">Android jetpack room+ViewModel+liveData 数据自动更新</a></p>
                                        <p>下一个：<a href="/news/article-102169.htm">瑞鹏宠物医院在线咨询（瑞鹏宠物医院在线咨询免费）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-65735.htm" title="centos7 64位下mysql5.7的安装配置卸载">centos7 64位下mysql5.7的安装配置卸载</a></li>
                        <li class="py-2"><a href="/news/article-96984.htm" title="动物医院专业就业方向有哪些（动物医院属于什么专业）">动物医院专业就业方向有哪些（动物医院属于什么专业）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-6-node-share.htm" title="3月6日最新机场订阅 | 21M/S|2025年V2ray/SSR/Shadowrocket/Clash免费节点地址链接分享">3月6日最新机场订阅 | 21M/S|2025年V2ray/SSR/Shadowrocket/Clash免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-72849.htm" title="通过源码了解Java的自动装箱拆箱">通过源码了解Java的自动装箱拆箱</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-22-node-share.htm" title="3月22日最新机场订阅 | 21.5M/S|2025年SSR/V2ray/Clash/Shadowrocket免费节点地址链接分享">3月22日最新机场订阅 | 21.5M/S|2025年SSR/V2ray/Clash/Shadowrocket免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-73516.htm" title="哈尔滨东北农大附近汉庭酒店（哈尔滨东北农业大学附近宾馆）">哈尔滨东北农大附近汉庭酒店（哈尔滨东北农业大学附近宾馆）</a></li>
                        <li class="py-2"><a href="/news/article-100011.htm" title="狗粮批发厂家联系方式大全最新（狗粮厂家电话）">狗粮批发厂家联系方式大全最新（狗粮厂家电话）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-8-free-subscribe-node.htm" title="4月8日最新机场订阅 | 20.5M/S|2025年SSR/Clash/Shadowrocket/V2ray免费节点地址链接分享">4月8日最新机场订阅 | 20.5M/S|2025年SSR/Clash/Shadowrocket/V2ray免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-4-free-node-subscribe.htm" title="4月4日最新机场订阅 | 20.7M/S|2025年V2ray/SSR/Clash/Shadowrocket免费节点地址链接分享">4月4日最新机场订阅 | 20.7M/S|2025年V2ray/SSR/Clash/Shadowrocket免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-92523.htm" title="国内十大宠物粮食品牌排行榜前十名 国内十大宠物粮食品牌排行榜前十名有哪些">国内十大宠物粮食品牌排行榜前十名 国内十大宠物粮食品牌排行榜前十名有哪些</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">72</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </section>
        </div>
    </main>
    <!--Main layout-->
        <!--Footer-->
    <footer class="page-footer text-center font-small mt-4 wow fadeIn">
        <!--Copyright-->
        <div class="footer-copyright py-3">
                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <p class="text-white-50 f-15 mb-0">
                <a href="/">Clash Daily免费订阅地址每日更新</a> 版权所有 Powered by WordPress
            </p>
        </div>
        <!--/.Copyright-->
    </footer>
    <!--/.Footer-->
    <!-- SCRIPTS -->
    <!-- JQuery -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/jquery-3.4.1.min.js"></script>
    <!-- Bootstrap tooltips -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/popper.min.js"></script>
    <!-- Bootstrap core JavaScript -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/bootstrap.min.js"></script>
    <!-- MDB core JavaScript -->
    <script type="text/javascript" src="/assets/website/js/frontend/clashdaily/mdb.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>